// <auto-generated />
using System;
using BookingSystem.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingSystem.Persistence.Migrations
{
    [DbContext(typeof(BookingSystemDbContext))]
    partial class BookingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingSystem.Domain.Entities.Amenities.Amenity", b =>
                {
                    b.Property<Guid>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AmenityCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ConferenceRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityId");

                    b.HasIndex("AmenityCategoryId");

                    b.HasIndex("ConferenceRoomId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Amenities.AmenityCategory", b =>
                {
                    b.Property<Guid>("AmenityCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityCategoryId");

                    b.ToTable("AmenityCategories");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConferenceRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("ConferenceRoomId");

                    b.HasIndex("EventId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a1ee9"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee7"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee28f549-e790-5e9f-aa15-18c2292a2ee2"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee38f549-e790-5e9f-aa15-18c2292a2ee3"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee9"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee08f549-e790-5e9f-aa15-18c2292a2ee4"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee0"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee48f549-e790-5e9f-aa15-18c2292a2ee5"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee1"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee58f549-e790-5e9f-aa15-18c2292a2ee6"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee2"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1")
                        },
                        new
                        {
                            BookingId = new Guid("ee68f549-e790-5e9f-aa15-18c2292a2ee7"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee3"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f543-e790-5e9f-aa15-18c2292a1ee9")
                        },
                        new
                        {
                            BookingId = new Guid("ee78f549-e790-5e9f-aa15-18c2292a2ee8"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f545-e790-5e9f-aa15-18c2292a2ee6")
                        },
                        new
                        {
                            BookingId = new Guid("ee88f549-e790-5e9f-aa15-18c2292a2ee9"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f548-e790-5e9f-aa15-18c2292a2ee3")
                        },
                        new
                        {
                            BookingId = new Guid("ee91f549-e790-5e9f-aa15-18c2292a1ee9"),
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("ee98f540-e790-5e9f-aa15-18c2292a2ee2")
                        });
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.ConferenceRooms.ConferenceRoom", b =>
                {
                    b.Property<Guid>("ConferenceRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConferenceRoomId");

                    b.ToTable("ConferenceRooms");

                    b.HasData(
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a1ee1"),
                            Capacity = 10,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 1 Description",
                            IsAvailable = true,
                            Name = "Conference Room 1",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee2"),
                            Capacity = 20,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 2 Description",
                            IsAvailable = true,
                            Name = "Conference Room 2",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee3"),
                            Capacity = 30,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 3 Description",
                            IsAvailable = false,
                            Name = "Conference Room 3",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee4"),
                            Capacity = 40,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 4 Description",
                            IsAvailable = true,
                            Name = "Conference Room 4",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee5"),
                            Capacity = 50,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 5 Description",
                            IsAvailable = false,
                            Name = "Conference Room 5",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee6"),
                            Capacity = 60,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 6 Description",
                            IsAvailable = false,
                            Name = "Conference Room 6",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee7"),
                            Capacity = 70,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 7 Description",
                            IsAvailable = false,
                            Name = "Conference Room 7",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee8"),
                            Capacity = 80,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 8 Description",
                            IsAvailable = false,
                            Name = "Conference Room 8",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee9"),
                            Capacity = 90,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 9 Description",
                            IsAvailable = false,
                            Name = "Conference Room 9",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-18c2292a2ee0"),
                            Capacity = 100,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 10 Description",
                            IsAvailable = false,
                            Name = "Conference Room 10",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee0"),
                            Capacity = 110,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 11 Description",
                            IsAvailable = false,
                            Name = "Conference Room 11",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee1"),
                            Capacity = 120,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 12 Description",
                            IsAvailable = false,
                            Name = "Conference Room 12",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee2"),
                            Capacity = 130,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 13 Description",
                            IsAvailable = false,
                            Name = "Conference Room 13",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee3"),
                            Capacity = 140,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 14 Description",
                            IsAvailable = false,
                            Name = "Conference Room 14",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee4"),
                            Capacity = 150,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 15 Description",
                            IsAvailable = false,
                            Name = "Conference Room 15",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee5"),
                            Capacity = 160,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 16 Description",
                            IsAvailable = false,
                            Name = "Conference Room 16",
                            Tags = ""
                        },
                        new
                        {
                            ConferenceRoomId = new Guid("ee98f549-e790-5e9f-aa15-11c2292a1ee6"),
                            Capacity = 170,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference Room 17 Description",
                            IsAvailable = false,
                            Name = "Conference Room 17",
                            Tags = ""
                        });
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Consumables.Consumable", b =>
                {
                    b.Property<Guid>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsumableCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsumableId");

                    b.HasIndex("ConsumableCategoryId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Consumables.ConsumableCategory", b =>
                {
                    b.Property<Guid>("ConsumableCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfConsumables")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsumableCategoryId");

                    b.ToTable("ConsumableCategories");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("End")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("ee98f549-e190-5e9f-aa15-18c2292a2ee1"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conference 1 Description",
                            End = new DateTimeOffset(new DateTime(2024, 9, 23, 10, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "primary",
                            Start = new DateTimeOffset(new DateTime(2024, 9, 23, 8, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 1"
                        },
                        new
                        {
                            EventId = new Guid("ee98f540-e790-5e9f-aa15-18c2292a2ee2"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 9, 13, 12, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "primary",
                            Start = new DateTimeOffset(new DateTime(2024, 9, 13, 10, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 2"
                        },
                        new
                        {
                            EventId = new Guid("ee98f548-e790-5e9f-aa15-18c2292a2ee3"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 8, 23, 14, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "primary",
                            Start = new DateTimeOffset(new DateTime(2024, 8, 23, 12, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 3"
                        },
                        new
                        {
                            EventId = new Guid("ee98f547-e790-5e9f-aa15-18c2292a2ee4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 9, 23, 16, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "warning",
                            Start = new DateTimeOffset(new DateTime(2024, 9, 23, 14, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 4"
                        },
                        new
                        {
                            EventId = new Guid("ee98f546-e790-5e9f-aa15-18c2292a2ee5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 10, 23, 18, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "warning",
                            Start = new DateTimeOffset(new DateTime(2024, 10, 23, 16, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 5"
                        },
                        new
                        {
                            EventId = new Guid("ee98f545-e790-5e9f-aa15-18c2292a2ee6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 8, 29, 20, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "warning",
                            Start = new DateTimeOffset(new DateTime(2024, 8, 29, 18, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 6"
                        },
                        new
                        {
                            EventId = new Guid("ee98f544-e790-5e9f-aa15-18c1292a2ee7"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 9, 10, 22, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "warning",
                            Start = new DateTimeOffset(new DateTime(2024, 9, 10, 20, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 7"
                        },
                        new
                        {
                            EventId = new Guid("ee98f541-e790-5e9f-aa15-18c2292a2ee8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 9, 8, 23, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "success",
                            Start = new DateTimeOffset(new DateTime(2024, 9, 8, 22, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 8"
                        },
                        new
                        {
                            EventId = new Guid("ee98f542-e790-5e9f-aa15-18c2292a2ee9"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 8, 24, 0, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "danger",
                            Start = new DateTimeOffset(new DateTime(2024, 8, 23, 23, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 9"
                        },
                        new
                        {
                            EventId = new Guid("ee98f543-e790-5e9f-aa15-18c2292a1ee9"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            End = new DateTimeOffset(new DateTime(2024, 8, 24, 2, 0, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Label = "primary",
                            Start = new DateTimeOffset(new DateTime(2024, 8, 24, 0, 30, 30, 791, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Title = "Conference 10"
                        });
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockEnquiry", b =>
                {
                    b.Property<Guid>("StockEnquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockEnquiryId");

                    b.HasIndex("BookingId");

                    b.ToTable("StockEnquiries");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockItem", b =>
                {
                    b.Property<Guid>("StockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsumableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockItemId");

                    b.HasIndex("ConsumableId");

                    b.HasIndex("StockId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockItemEnquiry", b =>
                {
                    b.Property<Guid>("StockItemEnquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConsumableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StockEnquiryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockItemEnquiryId");

                    b.HasIndex("StockEnquiryId");

                    b.ToTable("StockItemEnquiries");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Amenities.Amenity", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.Amenities.AmenityCategory", "AmenityCategory")
                        .WithMany("Amenities")
                        .HasForeignKey("AmenityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Domain.Entities.ConferenceRooms.ConferenceRoom", "ConferenceRoom")
                        .WithMany("Amenities")
                        .HasForeignKey("ConferenceRoomId");

                    b.Navigation("AmenityCategory");

                    b.Navigation("ConferenceRoom");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Bookings.Booking", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.ConferenceRooms.ConferenceRoom", "ConferenceRoom")
                        .WithMany()
                        .HasForeignKey("ConferenceRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Domain.Entities.Events.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConferenceRoom");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Consumables.Consumable", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.Consumables.ConsumableCategory", "Category")
                        .WithMany("Consumables")
                        .HasForeignKey("ConsumableCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockEnquiry", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockItem", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.Consumables.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId");

                    b.HasOne("BookingSystem.Domain.Entities.Inventory.Stock", "Stock")
                        .WithMany("StockItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockItemEnquiry", b =>
                {
                    b.HasOne("BookingSystem.Domain.Entities.Inventory.StockEnquiry", "StockEnquiry")
                        .WithMany("StockItemEnquiries")
                        .HasForeignKey("StockEnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockEnquiry");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Amenities.AmenityCategory", b =>
                {
                    b.Navigation("Amenities");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.ConferenceRooms.ConferenceRoom", b =>
                {
                    b.Navigation("Amenities");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Consumables.ConsumableCategory", b =>
                {
                    b.Navigation("Consumables");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.Stock", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("BookingSystem.Domain.Entities.Inventory.StockEnquiry", b =>
                {
                    b.Navigation("StockItemEnquiries");
                });
#pragma warning restore 612, 618
        }
    }
}
